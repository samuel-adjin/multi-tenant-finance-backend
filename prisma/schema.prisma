// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  mobile    String     @unique
  email     String     @unique
  owner     String
  isActive  Boolean    @default(true)
  timezone  String     @default("Africa/Accra")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User[]
  Customer  Customer[]
  Sequence  Sequence?
  Prefix    Prefix?

  @@index([slug])
}

model User {
  id                   String              @id @default(cuid())
  firstName            String
  otherNames           String
  email                String
  mobile               String
  isVerified           Boolean             @default(false)
  isLocked             Boolean             @default(false)
  dob                  DateTime
  role                 Role                @default(LOAN_OFFICER)
  lastLogin            DateTime?
  isActive             Boolean             @default(false)
  tenant               Tenant              @relation(fields: [tenantId], references: [id], onDelete: Restrict)
  tenantId             String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  VerificationToken    VerificationToken[]
  kycVerifiedCustomers Customer[]          @relation("CustomerKycVerifier")
  customersCreated     Customer[]          @relation("CustomerCreatedBy")
  documentsVerified    KycDocument[]       @relation("DocumentVerifier")
  documentsUploaded    KycDocument[]       @relation("DocumentUploader")

  @@unique([tenantId, email])
  @@unique([tenantId, mobile])
  @@index([tenantId])
}

model VerificationToken {
  id         String           @id @default(uuid())
  userId     String
  tokenHash  String
  type       VerificationType @default(EMAIL_VERIFICATION)
  expiresAt  DateTime
  consumedAt DateTime?
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([tokenHash])
  @@index([userId, type])
}

model Customer {
  id                String              @id @default(cuid())
  tenantId          String
  tenant            Tenant              @relation(fields: [tenantId], references: [id], onDelete: Restrict)
  customerNumber    String
  type              CustomerType        @default(INDIVIDUAL)
  externalReference String?
  externalSource    String?
  firstName         String
  lastName          String
  otherNames        String?
  gender            Gender?
  dob               DateTime?
  maritalStatus     MaritalStatus
  spouse            String?
  spouseOccupation  String?
  email             String?
  mobile            String?
  nationalId        String?
  nationalIdType    IdentificationType?
  kycVerified       Boolean             @default(false)
  kycStatus         KycStatus           @default(PENDING)
  kycVerifiedAt     DateTime?
  kycVerifiedById   String?
  kycVerifiedBy     User?               @relation("CustomerKycVerifier", fields: [kycVerifiedById], references: [id], onDelete: SetNull)
  status            CustomerStatus      @default(ACTIVE)
  createdById       String?
  createdBy         User?               @relation("CustomerCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  addresses         Address[]
  nextOfKins        NextOfKin[]
  business          CustomerBusiness?
  kycDocuments      KycDocument[]
  isDeleted         Boolean             @default(false)
  deletedAt         DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@unique([tenantId, customerNumber])
  @@unique([tenantId, externalReference])
  @@unique([tenantId, nationalId])
  @@index([tenantId, mobile])
  @@index([tenantId, email])
  @@index([tenantId, nationalId])
}

model CustomerBusiness {
  id                 String    @id @default(cuid())
  customerId         String    @unique
  customer           Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  businessName       String
  averageSalary      Decimal?  @db.Decimal(15, 2)
  registrationNumber String?
  taxId              String?
  industry           String?
  incorporationDate  DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([customerId])
}

model NextOfKin {
  id           String       @id @default(cuid())
  customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId   String
  fullName     String
  relationship Relationship
  mobile       String?
  email        String?
  addressId    String
  occupation   String?
  isPrimary    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([customerId])
}

model Address {
  id             String      @id @default(cuid())
  customer       Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String
  type           AddressType @default(HOME)
  line1          String // House number, street
  line2          String? // Additional address
  city           String
  region         String?
  postalCode     String?
  country        String      @default("GH")
  digitalAddress String? // Ghana Post GPS
  landmark       String?
  isPrimary      Boolean     @default(false)
  isVerified     Boolean     @default(false)
  verifiedAt     DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([customerId])
}

model KycDocument {
  id                String          @id @default(cuid())
  customerId        String
  customer          Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  documentType      KycDocumentType
  fileName          String
  s3Key             String
  s3Bucket          String
  fileSize          Int
  mimeType          String
  status            DocumentStatus  @default(PENDING)
  verificationNotes String?
  verifiedAt        DateTime?
  verifiedById      String?
  verifiedBy        User?           @relation("DocumentVerifier", fields: [verifiedById], references: [id], onDelete: SetNull)
  uploadedById      String?
  uploadedBy        User?           @relation("DocumentUploader", fields: [uploadedById], references: [id], onDelete: SetNull)
  isDeleted         Boolean         @default(false)
  deletedAt         DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([customerId, documentType])
  @@index([status])
  @@index([s3Key])
}

model Sequence {
  id           String @id @default(cuid())
  lastSequence Int
  tenant       Tenant @relation(fields: [tenantId], references: [id])
  tenantId     String @unique

  @@index([tenantId])
}

model Prefix {
  id        String   @id @default(cuid())
  prefix    String
  code      String   @unique
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Outbox {
  id           String       @id @default(cuid())
  type         OutBoxType   @default(ACCOUNT_VERIFICATION)
  payload      Json
  attemptCount Int          @default(0)
  maxAttempts  Int          @default(5)
  status       OutBoxStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  processedAt  DateTime?
  error        String?

  @@index([status, type, createdAt])
}

enum KycDocumentType {
  PASSPORT_PHOTO
  NATIONAL_ID_FRONT
  NATIONAL_ID_BACK
  DRIVER_LICENSE_FRONT
  DRIVER_LICENSE_BACK
  BUSINESS_REGISTRATION
  PROOF_OF_ADDRESS
  BANK_STATEMENT
  UTILITY_BILL
  OTHER
}

enum DocumentStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
  REQUIRES_RESUBMISSION
}

enum Relationship {
  PARENT
  CHILD
  SIBLING
  SPOUSE
  RELATIVE
  FRIEND
  GUARDIAN
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  BLACKLISTED
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum IdentificationType {
  NATIONAL_ID
  PASSPORT
  DRIVER_LICENSE
  BUSINESS_REGISTRATION
}

enum CustomerType {
  INDIVIDUAL
  BUSINESS
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
  ENHANCED_DUE_DILIGENCE
}

enum OutBoxStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum OutBoxType {
  ACCOUNT_VERIFICATION
  MAGIC_LINK
}

enum VerificationType {
  EMAIL_VERIFICATION
}

enum Role {
  SUPER_ADMIN
  LOAN_OFFICER
  MANAGER
  AUDITOR
  ADMIN
  CUSTOMER_SERVICE
}
